
Подключение на сервер:
Закидываем проект. Меняем debug = false. Добавляем айпишник в allowed host. Теперь запуск можно сделать через
runserver 0.0.0.0:8000 -> текущий айпишник в глобаке. Но сервер от джанго достаточно межденный, поэтому настроим
ngix -> более быстрый сервер и он будет общаться с джанго через wsgi. (pip install gunicorn ( библа для соединения через
wsgi)
Далее запустим сервер над папкой проекта gunicorn --bind 0.0.0.0:8000 mysite.wsgi .
Он переодически отключается, для того, чтобы он так не делал, воспользуемся утилитой на линуксе : systemd .
Она будет запускать наше приложение, когда то отключится.
sudo nano /etc/systemd/system/gunicorn.service - создадим файл,  и в него запишем юнит ( штука которая будет открывать)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Unit]
# это текстовое описание юнита, пояснение для разработчика
Description=gunicorn daemon

# при старте операционной системы запускать процесс только после того,
# как операционная система загрузится и настроит подключение к сети
After=network.target

[Service]
# от чьего имени запускать процесс:
# укажите имя, под которым вы подключались к серверу
User=<имя-пользователя-в-системе>

# адрес к директории, где установлен Gunicorn
WorkingDirectory=/home/<имя-пользователя-в-системе>/<директория-проекта>

# команду, которую вы запускали руками, теперь будет запускать systemd:
# в указанной директории будет выполнена команда bind
ExecStart=<путь-до-gunicorn-в-виртуальном-окружении> \
          --bind 127.0.0.1:8000 \
          <имя-проекта>.wsgi:application # файл запуска приложения

[Install]
WantedBy=multi-user.target # группировка юнитов

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

команда which gunicorn говорит путь до гана.
Теперь запускаем его через sudo systemctl start gunicorn # запустить юнит
и проверяем через  systemctl status gunicorn.service. Теперь наша команда выполняется постояно

Далее необходимо настроить ngix сервер, он будет перенаправлять запросы с порта 80 (дефолтный https)
на 8000. А так же возвращать статик файлы сразу, а динамику перенаправлять на Django.
* установим егo sudo apt install nginx -y . Далее добавим фаервол
sudo ufw allow 'Nginx Full' # разрешит принимать запросы на порты — 80 и 443: на них по умолчанию приходят запросы по http и https.
sudo ufw allow OpenSSH # открывает порт 22 — это стандартный порт для соединения по ssh. Если этот порт не открыть, то после запуска файрвола доступ по ssh будет заблокирован: замок защёлкнулся, а ключ остался внутри.
sudo ufw enable # запустили фаервол
sudo systemctl start nginx  # запустили ngix

Теперь надо поработать со статикой, возьмём и добавим
STATIC_URL = '/static/' # префикс для url
STATIC_ROOT = os.path.join(BASE_DIR, 'static/') # папка, в которой будет лежать статика
После вызовем
  python manage.py collectstatic, он соберёт всю статику в одном месте.
 Теперь настроим ngix чтобы тот работал с джанго
 sudo nano /etc/nginx/sites-enabled/default
 добавить в конец
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 # инструкции для nginx
server {
    # следи за портом 80 на сервере с IP <ваш-ip>
    listen 80;
    server_name <ваш-ip>;

    # если в адресе запроса есть аргумент '/static/' - верни файл из директории static/
      location /static {
        root /path/to/your/mysite/django_blog/;  # расположение статики (в джанго блоге лежит статика)
    }
    # любой другой запрос передай серверу Gunicorn
    location / {
        include proxy_params;
        # передавать запросы нужно на внутренний IP на порт 8000
        proxy_pass http://127.0.0.1:8000;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Теперь добавим домен. На сайте домена укажем Record A переодресацию на наш айпи
server name = gigglingpenguin.me
и в allowed host gigglingpenguin.me
перезагружаем всё что видем ngix и gunicorn
И теперь по нашему домену доступен наш сайт.

Далее настроим https. Чтобы это сделать, нам нужен ssl сертификат, который закрепит за нашим доменом наш ip.
Сайт https://letsencrypt.org/getting-started/ предоставляет бесплатные ssl ертифекаты при помощи
certbot https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx -> там же у нас фулл установка
sudo certbot --nginx и ответы  (a, n, /enter, 2)